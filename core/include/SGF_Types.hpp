#pragma once

#include <stdint.h>
#include "SGF_Macros.hpp"

namespace SGF {
    typedef uint32_t Flags;
    inline constexpr Flags FLAG_NONE = 0;
    class Window;
    class Device;
    class Swapchain;
    class Display;
    class RenderPass;
    class DeviceMemory;
    class Buffer;
    class Image;
    class ImageView;
    class CommandList;

    // Events: 
    class WindowResizeEvent;
    class WindowCloseEvent;
    class WindowMinimizeEvent;
    class MouseMovedEvent;
    class MouseButtonEvent;
    class KeyPressedEvent;
    class KeyTypedEvent;
    class DeviceDestroyEvent;
    // Layer:
    class Layer;
    class LayerStack;

    enum WindowCreateFlagBits {
        WINDOW_FLAG_FULLSCREEN = BIT(0),
        WINDOW_FLAG_RESIZABLE = BIT(1),
        WINDOW_FLAG_MINIMIZED = BIT(2),
        WINDOW_FLAG_MAXIMIZED = BIT(3)
    };
    typedef Flags WindowCreateFlags;

    enum DeviceFeature {
        DEVICE_FEATURE_ROBUST_BUFFER_ACCESS,
        DEVICE_FEATURE_FULL_DRAW_INDEX_UINT32,
        DEVICE_FEATURE_IMAGE_CUBE_ARRAY,
        DEVICE_FEATURE_INDEPENDENT_BLEND,
        DEVICE_FEATURE_GEOMETRY_SHADER,
        DEVICE_FEATURE_TESSELLATION_SHADER,
        DEVICE_FEATURE_SAMPLE_RATE_SHADING,
        DEVICE_FEATURE_DUAL_SRC_BLEND,
        DEVICE_FEATURE_LOGIC_OP,
        DEVICE_FEATURE_MULTI_DRAW_INDIRECT,
        DEVICE_FEATURE_DRAW_INDIRECT_FIRST_INSTANCE,
        DEVICE_FEATURE_DEPTH_CLAMP,
        DEVICE_FEATURE_DEPTH_BIAS_CLAMP,
        DEVICE_FEATURE_FILL_MODE_NON_SOLID,
        DEVICE_FEATURE_DEPTH_BOUNDS,
        DEVICE_FEATURE_WIDE_LINES,
        DEVICE_FEATURE_LARGE_POINTS,
        DEVICE_FEATURE_ALPHA_TO_ONE,
        DEVICE_FEATURE_MULTI_VIEWPORT,
        DEVICE_FEATURE_SAMPLER_ANISOTROPY,
        DEVICE_FEATURE_TEXTURE_COMPRESSION_ETC2,
        DEVICE_FEATURE_TEXTURE_COMPRESSION_ASTC_LDR,
        DEVICE_FEATURE_TEXTURE_COMPRESSION_BC,
        DEVICE_FEATURE_OCCLUSION_QUERY_PRECISE,
        DEVICE_FEATURE_PIPELINE_STATISTICS_QUERY,
        DEVICE_FEATURE_VERTEX_PIPELINE_STORES_AND_ATOMICS,
        DEVICE_FEATURE_FRAGMENT_STORES_AND_ATOMICS,
        DEVICE_FEATURE_SHADER_TESSELLATION_AND_GEOMETRY_POINT_SIZE,
        DEVICE_FEATURE_SHADER_IMAGE_GATHER_EXTENDED,
        DEVICE_FEATURE_SHADER_STORAGE_IMAGE_EXTENDED_FORMATS,
        DEVICE_FEATURE_SHADER_STORAGE_IMAGE_MULTISAMPLE,
        DEVICE_FEATURE_SHADER_STORAGE_IMAGE_READ_WITHOUT_FORMAT,
        DEVICE_FEATURE_SHADER_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT,
        DEVICE_FEATURE_SHADER_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING,
        DEVICE_FEATURE_SHADER_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING,
        DEVICE_FEATURE_SHADER_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING,
        DEVICE_FEATURE_SHADER_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING,
        DEVICE_FEATURE_SHADER_CLIP_DISTANCE,
        DEVICE_FEATURE_SHADER_CULL_DISTANCE,
        DEVICE_FEATURE_SHADER_FLOAT64,
        DEVICE_FEATURE_SHADER_INT64,
        DEVICE_FEATURE_SHADER_INT16,
        DEVICE_FEATURE_SHADER_RESOURCE_RESIDENCY,
        DEVICE_FEATURE_SHADER_RESOURCE_MIN_LOD,
        DEVICE_FEATURE_SPARSE_BINDING,
        DEVICE_FEATURE_SPARSE_RESIDENCY_BUFFER,
        DEVICE_FEATURE_SPARSE_RESIDENCY_IMAGE2D,
        DEVICE_FEATURE_SPARSE_RESIDENCY_IMAGE3D,
        DEVICE_FEATURE_SPARSE_RESIDENCY_2_SAMPLES,
        DEVICE_FEATURE_SPARSE_RESIDENCY_4_SAMPLES,
        DEVICE_FEATURE_SPARSE_RESIDENCY_8_SAMPLES,
        DEVICE_FEATURE_SPARSE_RESIDENCY_16_SAMPLES,
        DEVICE_FEATURE_SPARSE_RESIDENCY_ALIASED,
        DEVICE_FEATURE_VARIABLE_MULTISAMPLE_RATE,
        DEVICE_FEATURE_INHERITED_QUERIES,
        DEVICE_FEATURE_MAX_ENUM
    };

    enum QueueFamilyFlagBits {
        QUEUE_FAMILY_GRAPHICS = BIT(0),
        QUEUE_FAMILY_COMPUTE = BIT(1),
        QUEUE_FAMILY_TRANSFER = BIT(2),
        QUEUE_FAMILY_PRESENT = BIT(3)
    };
    typedef Flags QueueFamilyFlags;


}

